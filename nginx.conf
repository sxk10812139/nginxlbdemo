
#配置允许启动nginx的用户及用户组 nobody表示所有用户 user user [group]
#user  nobody;

#配置工作进程数 通常设置等同于cpu核心数
worker_processes  1;

#配置错误文件存放路径 包含debug|info|notice|warn|error|crit|alert|emerg错误等级 需要写权限
error_log  error.log error;

#配置nginx进程pid存放路径 nginx守护进程方式运行，需要以文件形式存储当前程序的主进程号
#pid        logs/nginx.pid;

events {
    #配置事件驱动模型 select|poll|kqueue|epoll mac下使用kqueue linux下使用epoll
    #use kqueue;

    #配置每个worker进程同时开启的最大连接数 
    worker_connections  1024;
}

http {
	autoindex on;
    #配置网络媒体资源类型文件
    include       mime.types;
    default_type  application/octet-stream;

    #定义日志格式main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #设置访问日志文件及格式
    #access_log  logs/access.log  main;

    #配置允许sendfile方式传输文件 提升服务器本地读写性能
    sendfile        on;
    #sendfile开启有效 减少网络阻塞
    #tcp_nopush     on;

    #配置连接超时时间 与用户建立会话连接后，nginx可以保持这些连接一段时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

	#客户端上传文件大小
	client_max_body_size 20m;
	
	server {
		listen *:80 default_server;
		
		location / {
			add_header Cache-Control no-store;
			proxy_pass http://backend;	
		}
	}

#    server {		# server块定义了虚拟主机
#        listen          80;
#        #listen         *:80 default_server;
#        server_name     www.myserver.com *.myserver.com;
#        root            /path/to/workdir/;	# 指定对应uri的资源查找路径
#
#        #设定主页 顺序查找$document_root/app/cache/index.php $document_root/appcache/index.html...
#        #try_files       /app/cache/ $uri @fallback;
#        #index           index.php index.html index.htm;       # 指定首页index文件的名称，可以配置多个，以空格分开。 
#
#        #location [=|~|~*|^~] uri {...}         
#        # =     普通字符精确匹配
#        # ^~    普通字符匹配,停止匹配其他location
#        # ~     正则模糊匹配
#        # ~*    正则无视大小写模糊匹配
#        location / {
#            #匹配所有请求，因为所有请求都是以/开头的
#            #但是更长字符匹配或正则匹配会优先匹配 相当于switch中的default
#        }
#        
#        location = / {			# 精确匹配，只有完全匹配上才能生效
#            #只匹配 /
#        }
#
#        location ^~ /images/ {
#            #匹配任何以 /images/开始的请求，并停止匹配其他location
#        }
#
#        location ~* \.(gif|jpg|jpeg)$ {
#            #匹配以gif|jpg|jpeg结尾的请求
#            #但所有/images/目录的请求由^~ /images/下配置处理
#        }
#
#        #错误页面
#        #error_page error_code url|uri;
#        #error_page 404 http://baidu.com;
#        #error_page 404 /404.html;
#        #location = /404.html {
#        #   root path/to/workdir;
#        #} 
#
#        #基于IP的访问控制
#        #location / {
#        #    allow 192.168.1.1;
#        #    deny all;
#        #}
#
#        #静态文件缓存 (浏览器) d h m
#        location ~ \.(jpg|jpeg|png|gif)$ {
#            #设定过期时间1天
#            expires 1d;
#            break;
#        }
#
#    }



    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

	include upstream.conf; 
}
